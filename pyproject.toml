[project]
name = "mesoshop"
version = "0.1.0"
description = "Modern e-commerce backend with FastAPI"
authors = [
    {name = "MesoShop Team", email = "team@mesoshop.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["fastapi", "e-commerce", "api", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.110.0",
    "mangum>=0.17.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "stripe>=7.8.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "loguru>=0.7.2",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "mypy>=1.7.0",
    "ruff>=0.1.7",
    "bandit[toml]>=1.7.5",
    "pre-commit>=3.5.0",
    "black>=23.10.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]

[project.urls]
Homepage = "https://github.com/mesoshop/backend"
Documentation = "https://docs.mesoshop.com"
Repository = "https://github.com/mesoshop/backend.git"
"Bug Tracker" = "https://github.com/mesoshop/backend/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "mypy>=1.7.0",
    "ruff>=0.1.7",
    "bandit[toml]>=1.7.5",
    "pre-commit>=3.5.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic/versions",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # pylint
    "RUF",    # ruff-specific rules
    "S",      # bandit security
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "S101",   # use of assert
    "S105",   # possible hardcoded password
    "S107",   # possible hardcoded password
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "PLR0912", # too many branches
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S"]
"app/core/config.py" = ["UP007"]  # Allow Union syntax for settings

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "alembic"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Ignore missing imports for some packages
[[tool.mypy.overrides]]
module = [
    "mangum",
    "redis",
    "celery",
    "stripe",
    "passlib.*",
    "jose.*",
    "loguru",
    "sentry_sdk.*",
]
ignore_missing_imports = true

# Less strict for tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py', '*/conftest.py']

# Coverage configuration  
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "app/core/config.py",  # Settings file often not fully testable
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"