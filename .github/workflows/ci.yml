name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    name: Lint & Format Check
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Restore uv cache
        uses: actions/cache@v3
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync

      - name: Check code formatting with ruff
        run: |
          uv run ruff format --check app/ tests/

      - name: Lint with ruff
        run: |
          uv run ruff check app/ tests/

      - name: Type check with mypy
        run: |
          uv run mypy app/

  # Security scan
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync

      - name: Run bandit security scan
        run: |
          uv run bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Run dependency audit
        run: |
          uv run pip-audit --format=json --output=audit-report.json
        continue-on-error: true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: audit-report.json

  # Test with coverage
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    strategy:
      matrix:
        python-version: ["3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_mesoshop
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=app --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_mesoshop
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          STRIPE_SECRET_KEY: sk_test_dummy_key_for_ci
          STRIPE_PUBLISHABLE_KEY: pk_test_dummy_key_for_ci
          GOOGLE_CLOUD_PROJECT: test-project
          GEMINI_API_KEY: test-key
          ENVIRONMENT: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            .coverage

  # Build package (only on main branch)
  build:
    runs-on: ubuntu-latest
    name: Build Package
    needs: [lint, security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv sync
          uv add --dev build

      - name: Build package
        run: |
          uv run python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Deploy to Vercel (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Vercel
    needs: [lint, security, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Performance and health checks
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4

      - name: Run API health check
        run: |
          curl -f ${{ secrets.DEPLOYMENT_URL }}/health || exit 1

      - name: Run basic performance test
        run: |
          curl -w "@curl-format.txt" -s -o /dev/null ${{ secrets.DEPLOYMENT_URL }}/
        continue-on-error: true

  # Cleanup cache on main branch
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    if: always()
    steps:
      - name: Cleanup uv cache
        run: |
          rm -rf /tmp/.uv-cache